@page "/host/{SessionId}"
@using Reply_o_ke.Client.Services
@using Reply_o_ke.Client.Models
@using Microsoft.JSInterop
@using System.Web
@inject ApiService ApiService
@inject SignalRService SignalRService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Host - Reply-O-Ke</PageTitle>

<div class="container-fluid">
    @if (!isConnected)
    {
        <div class="text-center mt-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Conectando...</span>
            </div>
            <p class="mt-3">Conectando √† sess√£o...</p>
        </div>
    }
    else
    {
        @if (isFullscreen && currentVideo != null)
        {
            <!-- Modo tela cheia para reprodu√ß√£o do v√≠deo -->
            <div class="fullscreen-video" id="fullscreen-container">
                <div class="video-info">
                    <h2>üé§ @currentVideo.UserName</h2>
                    <h3>üéµ @currentVideo.VideoTitle</h3>
                </div>

                <div class="video-container">
                    <iframe id="youtube-player"
                            src="https://www.youtube.com/embed/@GetVideoId(currentVideo.VideoUrl)?autoplay=1&rel=0&modestbranding=1"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen>
                    </iframe>
                </div>

                <div class="video-controls">
                    <button class="btn btn-danger btn-lg" @onclick="EndCurrentVideo">
                        ‚è≠Ô∏è Pr√≥xima M√∫sica
                    </button>
                    <button class="btn btn-secondary btn-lg ms-3" @onclick="ExitFullscreen">
                        üîô Voltar
                    </button>
                </div>
            </div>
        }
        else
        {
            <!-- Interface normal do host -->
            <div class="row">
                <div class="col-12">
                    <div class="card shadow mt-3">
                        <div class="card-header bg-primary text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h3>üé§ Sess√£o de Karaoke - Host</h3>
                                <div>
                                    <span class="badge bg-light text-dark me-2">ID: @SessionId</span>
                                    @if (!string.IsNullOrEmpty(SessionQRCode))
                                    {
                                        <img src="data:image/png;base64,@SessionQRCode" alt="QR Code da Sess√£o" style="height:150px;" />
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (queue.Any())
                            {
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5>üìã Fila de M√∫sicas (@queue.Count)</h5>
                                    <button class="btn btn-success btn-lg" @onclick="StartNextVideo" disabled="@isPlayingVideo">
                                        @if (isPlayingVideo)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        ‚ñ∂Ô∏è Come√ßar Pr√≥xima
                                    </button>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th width="5%">#</th>
                                                <th width="25%">üë§ Usu√°rio</th>
                                                <th width="55%">üéµ M√∫sica</th>
                                                <th width="15%">‚è∞ Adicionado</th>
                                                <th width="10%">üóëÔ∏è A√ß√£o</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < queue.Count; i++)
                                            {
                                                var item = queue[i];
                                                <tr class="@(i == 0 ? "table-warning" : "")">
                                                    <td>
                                                        @if (i == 0)
                                                        {
                                                            <span class="badge bg-warning text-dark">Pr√≥ximo</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">@(i + 1)</span>
                                                        }
                                                    </td>
                                                    <td><strong>@item.UserName</strong></td>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <img src="https://img.youtube.com/vi/@GetVideoId(item.VideoUrl)/mqdefault.jpg"
                                                                 alt="Thumbnail" class="me-2 rounded" style="width: 60px; height: 45px; object-fit: cover;" />
                                                            <div>
                                                                <div class="fw-bold">@item.VideoTitle</div>
                                                                <small class="text-muted">@item.VideoUrl</small>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <small class="text-muted">
                                                            @item.AddedAt.ToString("HH:mm")
                                                        </small>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveQueueItem(item.Id)">
                                                            üóëÔ∏è Excluir
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <div class="mb-4">
                                        <i class="display-1">üé§</i>
                                    </div>
                                    <h4>Fila Vazia</h4>
                                    <p class="text-muted">Aguardando participantes adicionarem m√∫sicas...</p>
                                    <div class="mt-4">
                                        <p><strong>Escaneie o QR Code para entrar na sess√£o:</strong></p>
                                        @if (!string.IsNullOrEmpty(SessionQRCode))
                                    {
                                        <img src="data:image/png;base64,@SessionQRCode" alt="QR Code da Sess√£o" style="height:150px;" />
                                    }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<style>
    .fullscreen-video {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: #000;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        color: white;
    }

    .video-info {
        text-align: center;
        padding: 20px;
        background: rgba(0,0,0,0.8);
    }

    .video-container {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

        .video-container iframe {
            width: 90vw;
            height: 60vh;
            max-width: 1200px;
            max-height: 675px;
        }

    .video-controls {
        text-align: center;
        padding: 20px;
        background: rgba(0,0,0,0.8);
    }
</style>

@code {
    [Parameter] public string SessionId { get; set; } = string.Empty;

    private bool isConnected = false;
    private bool isPlayingVideo = false;
    private bool isFullscreen = false;
    private List<QueueItem> queue = new();
    private QueueItem? currentVideo = null;
    private string? SessionQRCode;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetQrCode(SessionId);
            await SignalRService.StartAsync();
            await SignalRService.JoinAsHostAsync(SessionId);

            // Configure SignalR event handlers
            SignalRService.OnQueueUpdated(async (sessionId) =>
            {
                if (sessionId == SessionId)
                {
                    await LoadQueue();
                }
            });

            SignalRService.OnNewQueueItem((item) =>
            {
                InvokeAsync(LoadQueue);
            });

            SignalRService.OnPlayNext((item) =>
            {
                // Next video automatically starts
                InvokeAsync(LoadQueue);
            });

            SignalRService.OnQueueEmpty(() =>
            {
                isFullscreen = false;
                currentVideo = null;
                InvokeAsync(StateHasChanged);
            });

            isConnected = true;
            await LoadQueue();
            StateHasChanged();


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao conectar: {ex.Message}");
        }
    }
    private async Task GetQrCode(string sessionId)
    {
        StateHasChanged();
        try
        {
            var response = await ApiService.GetSessionAsync(sessionId);
            if (response != null)
            {
                sessionId = response.SessionId;
                SessionQRCode = response.QRCode;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao recuperar a sess√£o: {ex.Message}");
            // TODO: Adicionar notifica√ß√£o de erro
        }
        finally
        {
            StateHasChanged();
        }
    }
    private async Task LoadQueue()
    {
        try
        {
            queue = await ApiService.GetQueueAsync(SessionId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar fila: {ex.Message}");
        }
    }
    private void StartNextVideo()
    {
        if (!queue.Any()) return;

        isPlayingVideo = true;
        currentVideo = queue.First();
        isFullscreen = true;
        StateHasChanged();

        // Auto-detect video end after 5 minutes (fallback)
        _ = Task.Delay(TimeSpan.FromMinutes(5)).ContinueWith(async _ =>
        {
            if (isFullscreen && currentVideo != null)
            {
                await EndCurrentVideo();
            }
        });
    }

    private async Task EndCurrentVideo()
    {
        if (currentVideo == null) return;

        try
        {
            await SignalRService.VideoEndedAsync(SessionId, currentVideo.Id);
            isFullscreen = false;
            isPlayingVideo = false;
            currentVideo = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao finalizar v√≠deo: {ex.Message}");
        }
    }

    private void ExitFullscreen()
    {
        isFullscreen = false;
        StateHasChanged();
    }
    private string GetVideoId(string url)
    {
        try
        {
            var uri = new Uri(url);
            var query = HttpUtility.ParseQueryString(uri.Query);
            return query["v"] ?? "";
        }
        catch
        {
            return "";
        }
    }

    private string GetJoinUrl()
    {
        return $"{Navigation.BaseUri}join/{SessionId}";
    }
    private async Task CopySessionLink()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetJoinUrl());
        }
        catch
        {
            // Fallback
        }
    }

    private async Task RemoveQueueItem(int itemId)
    {
        try
        {
            await ApiService.RemoveQueueItemAsync(SessionId, itemId);
            await LoadQueue();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover item da fila: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (SignalRService != null)
        {
            await SignalRService.DisposeAsync();
        }
    }
}
